#include "oaDX11SamplerState.h"
#include "oaDX11GraphicAPI.h"


namespace oaEngineSDK {

Map<FILTER, uint32> FILTER_FLAGS = {
  {FILTER::MIN_MAG_MIP_POINT,D3D11_FILTER_MIN_MAG_MIP_POINT},
  {FILTER::MIN_MAG_POINT_MIP_LINEAR,D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR},
  {FILTER::MIN_POINT_MAG_LINEAR_MIP_POINT,D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT},
  {FILTER::MIN_POINT_MAG_MIP_LINEAR,D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR},
  {FILTER::MIN_LINEAR_MAG_MIP_POINT,D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT},
  {FILTER::MIN_LINEAR_MAG_POINT_MIP_LINEAR,D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR},
  {FILTER::MIN_MAG_LINEAR_MIP_POINT,D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT},
  {FILTER::MIN_MAG_MIP_LINEAR,D3D11_FILTER_MIN_MAG_MIP_LINEAR},
  {FILTER::ANISOTROPIC,D3D11_FILTER_ANISOTROPIC},
  {FILTER::COMPARISON_MIN_MAG_MIP_POINT,D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT},
  {FILTER::COMPARISON_MIN_MAG_POINT_MIP_LINEAR,D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR},
  {FILTER::COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT},
  {FILTER::COMPARISON_MIN_POINT_MAG_MIP_LINEAR,D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR},
  {FILTER::COMPARISON_MIN_LINEAR_MAG_MIP_POINT,D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT},
  {FILTER::COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR},
  {FILTER::COMPARISON_MIN_MAG_LINEAR_MIP_POINT,D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT},
  {FILTER::COMPARISON_MIN_MAG_MIP_LINEAR,D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR},
  {FILTER::COMPARISON_ANISOTROPIC,D3D11_FILTER_COMPARISON_ANISOTROPIC},
  {FILTER::MINIMUM_MIN_MAG_MIP_POINT,D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT},
  {FILTER::MINIMUM_MIN_MAG_POINT_MIP_LINEAR,D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR},
  {FILTER::MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT},
  {FILTER::MINIMUM_MIN_POINT_MAG_MIP_LINEAR,D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR},
  {FILTER::MINIMUM_MIN_LINEAR_MAG_MIP_POINT,D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT},
  {FILTER::MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR},
  {FILTER::MINIMUM_MIN_MAG_LINEAR_MIP_POINT,D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT},
  {FILTER::MINIMUM_MIN_MAG_MIP_LINEAR,D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR},
  {FILTER::MINIMUM_ANISOTROPIC,D3D11_FILTER_MINIMUM_ANISOTROPIC},
  {FILTER::MAXIMUM_MIN_MAG_MIP_POINT,D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT},
  {FILTER::MAXIMUM_MIN_MAG_POINT_MIP_LINEAR,D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR},
  {FILTER::MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT},
  {FILTER::MAXIMUM_MIN_POINT_MAG_MIP_LINEAR,D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR},
  {FILTER::MAXIMUM_MIN_LINEAR_MAG_MIP_POINT,D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT},
  {FILTER::MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR},
  {FILTER::MAXIMUM_MIN_MAG_LINEAR_MIP_POINT,D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT},
  {FILTER::MAXIMUM_MIN_MAG_MIP_LINEAR,D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR},
  {FILTER::MAXIMUM_ANISOTROPIC,D3D11_FILTER_MAXIMUM_ANISOTROPIC}
};

Map<TEXTURE_ADDRESS_MODE, uint32> TEXTURE_ADDRESS_FLAGS{
  {TEXTURE_ADDRESS_MODE::WRAP,D3D11_TEXTURE_ADDRESS_WRAP},
  {TEXTURE_ADDRESS_MODE::MIRROR,D3D11_TEXTURE_ADDRESS_MIRROR},
  {TEXTURE_ADDRESS_MODE::CLAMP,D3D11_TEXTURE_ADDRESS_CLAMP},
  {TEXTURE_ADDRESS_MODE::BORDER,D3D11_TEXTURE_ADDRESS_BORDER},
  {TEXTURE_ADDRESS_MODE::MIRROR_ONCE,D3D11_TEXTURE_ADDRESS_MIRROR_ONCE},  
};

Map<COMPARISON_FUNC, uint32> COMPARISON_FLAGS{
  {COMPARISON_FUNC::NEVER,D3D11_COMPARISON_NEVER},
  {COMPARISON_FUNC::LESS,D3D11_COMPARISON_LESS},
  {COMPARISON_FUNC::EQUAL,D3D11_COMPARISON_EQUAL},
  {COMPARISON_FUNC::LESS_EQUAL,D3D11_COMPARISON_LESS_EQUAL},
  {COMPARISON_FUNC::GREATER,D3D11_COMPARISON_GREATER},
  {COMPARISON_FUNC::NOT_EQUAL,D3D11_COMPARISON_NOT_EQUAL},
  {COMPARISON_FUNC::GREATER_EQUAL,D3D11_COMPARISON_GREATER_EQUAL},
  {COMPARISON_FUNC::ALWAYS,D3D11_COMPARISON_ALWAYS}
}; 

DX11SamplerState::~DX11SamplerState()
{
  if (samplerState) samplerState->Release();
}

bool DX11SamplerState::init(SamplerDesc descriptor)
{
  D3D11_SAMPLER_DESC sampDesc;

  ZeroMemory(&sampDesc, sizeof(sampDesc));

  sampDesc.Filter = static_cast<D3D11_FILTER>(FILTER_FLAGS[descriptor.filter]);

  sampDesc.AddressU = static_cast<D3D11_TEXTURE_ADDRESS_MODE>(TEXTURE_ADDRESS_FLAGS[descriptor.addressU]);

  sampDesc.AddressV = static_cast<D3D11_TEXTURE_ADDRESS_MODE>(TEXTURE_ADDRESS_FLAGS[descriptor.addressV]);

  sampDesc.AddressW = static_cast<D3D11_TEXTURE_ADDRESS_MODE>(TEXTURE_ADDRESS_FLAGS[descriptor.addressW]);

  sampDesc.ComparisonFunc = static_cast<D3D11_COMPARISON_FUNC>(COMPARISON_FLAGS[descriptor.comparison]);

  sampDesc.MinLOD = descriptor.minLOD;

  sampDesc.MaxLOD = descriptor.maxLOD;

  HRESULT hr = reinterpret_cast<DX11GraphicAPI*>(DX11GraphicAPI::instancePtr())->
  device->CreateSamplerState( &sampDesc, &samplerState );

  if( FAILED( hr ) )
    return false;

  return true;
}

}

